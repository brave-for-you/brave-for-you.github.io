<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOs@7.9</title>
      <link href="/2024/05/01/centos-7.9/"/>
      <url>/2024/05/01/centos-7.9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于<a href="mailto:&#x43;&#101;&#110;&#x74;&#x4f;&#x73;&#x40;&#55;&#x2e;&#57;">&#x43;&#101;&#110;&#x74;&#x4f;&#x73;&#x40;&#55;&#x2e;&#57;</a> 初次使用注意以及基本内容，持续完善中…</p></blockquote><h2 id="首次启动"><a href="#首次启动" class="headerlink" title="首次启动"></a>首次启动</h2><h3 id="创建文件夹-amp-文件"><a href="#创建文件夹-amp-文件" class="headerlink" title="创建文件夹&amp;文件"></a>创建文件夹&amp;文件</h3><pre><code class="shell">cd /makedir myAppcd /myAppecho &gt; myApp.txtecho &#39;追加&#39; &gt;&gt; myApp.txt</code></pre><h3 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h3><pre><code class="shell">    adduser username    passwd username</code></pre><h3 id="关于yum、rpm基本命令"><a href="#关于yum、rpm基本命令" class="headerlink" title="关于yum、rpm基本命令"></a>关于yum、rpm基本命令</h3><pre><code class="shell">    yum install -y name    yum remove name    yum clean    yum localinstall rpm包地址    # 查询所有rpm包，grep筛选出包含mysql的内容    rpm -qa | grep mysql</code></pre><h3 id="python3-11-1安装"><a href="#python3-11-1安装" class="headerlink" title="python3.11.1安装"></a>python3.11.1安装</h3><pre><code class="shell">    # 下载文件到临时目录    cd /temp    wget https://www.python.org/ftp/python/3.11.1/Python-3.11.1.tgz    tar -xzf Python-3.11.1.tgz    # 安装依赖环境    yum -y install gcc zlib zlib-devel libffi libffi-devel    yum install readline-devel    yum install openssl-devel openssl11 openssl11-devel    export CFLAGS=$(pkg-config --cflags openssl11)    export LDFLAGS=$(pkg-config --libs openssl11)    # 进入下载文件解压地址    cd Python-3.11.1    # 指定安装路径    ./configure --prefix=/usr/bin/python3.11 --with-ssl    make    make install    # 软链指向    ln -s /usr/bin/python3.11/bin/python3 /usr/bin/python3    ln -s /usr/bin/python3.11/bin/pip3 /usr/bin/pip3</code></pre><h3 id="修改python默认版本软链指向"><a href="#修改python默认版本软链指向" class="headerlink" title="修改python默认版本软链指向"></a>修改python默认版本软链指向</h3><pre><code class="shell">    # 慎重修改， 部分系统安装是默认依赖版本是python2    sudo rm -rf /usr/bin/python    sudo ln -s /usr/bin/python3 /usr/bin/python</code></pre><h3 id="x43-x65-110-x74-79-x73-x40-55-46-x39-安装mysql"><a href="#x43-x65-110-x74-79-x73-x40-55-46-x39-安装mysql" class="headerlink" title="&#x43;&#x65;&#110;&#x74;&#79;&#x73;&#x40;&#55;&#46;&#x39; 安装mysql"></a><a href="mailto:&#x43;&#x65;&#110;&#x74;&#79;&#x73;&#x40;&#55;&#46;&#x39;">&#x43;&#x65;&#110;&#x74;&#79;&#x73;&#x40;&#55;&#46;&#x39;</a> 安装mysql</h3><pre><code class="shell">    # 检查历史版本    rpm -qa | grep -i mysql    rpm -qa | grep -i mariadb    # 卸载历史版本（如已安装过）    yum remove -y mysql安装包名称    yum remove -y mariadb安装包名称    # 清理残留数据目录及文件-示例    # 删除安装目录    whereis mysql    rm -rf /usr/lib64/mysql /usr/share/mysql    # 删除数据目录    rm -rf /var/lib/mysql    # 删除配置文件    rm -rf /etc/my.cnf    # 删除日志文件    rm -rf /var/log/mysql    rm -rf /var/log/mysqld.log    # 删除临时文件    rm -rf /tmp/mysql*    # 删除服务和启动脚本    rm -rf /etc/init.d/mysql    rm -rf /usr/lib/systemd/system/mysql.service    # 下载mysql官方yum源    wget  https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm    # 安装官方yum源    rpm -ivh mysql80-community-release-el7-3.noarch.rpm    # 清理yum缓存目录    yum clean all    # 重新上传yum缓存    yum makecache    # 导入GPG密钥（查看官方最新源https://repo.mysql.com/）    rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023    # 安装mysql    yum install -y mysql-community-server mysql-community    mysql -V    # 查看临时初始密码    grep &#39;temporary password&#39; /var/log/mysqld.log</code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dev-Memos</title>
      <link href="/2024/05/01/dev-memos/"/>
      <url>/2024/05/01/dev-memos/</url>
      
        <content type="html"><![CDATA[<p>一些感觉有意思的代码片段记录，持续更新记录…</p><h2 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><pre><code class="javascript">compileStr(code) &#123;    let c = String.fromCharCode(code.charCodeAt(0) + code.length)    for(let i = 1; i &lt; code.length; i++) &#123;        c += String.fromCharCode(code.charCodeAt(i) + code.charCodeAt(i - 1))    &#125;    return escape(c)&#125;</code></pre><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><pre><code class="javascript">unCompileStr(str) &#123;    const code = unescape(str)    let c = String.fromCharCode(code.charCodeAt(0) - code.length)    for(let i = 1; i &lt; code.length; i++) &#123;        c += String.fromCharCode(code.charCodeAt(i) - c.charCodeAt(i - 1))    &#125;    return c&#125;</code></pre><h2 id="时间内容"><a href="#时间内容" class="headerlink" title="时间内容"></a>时间内容</h2><h3 id="时分秒倒计时（09-59-20）"><a href="#时分秒倒计时（09-59-20）" class="headerlink" title="时分秒倒计时（09:59:20）"></a>时分秒倒计时（09:59:20）</h3><pre><code class="javascript">// timeStamp为毫秒handleToSetTimerFn(timeStamp) &#123;    let timer = null    let t = timeStamp    let h = 0    let m = 0    let s = 0    h = Math.floor(t / (60 * 60))    h &lt; 10 &amp;&amp; (h = &#39;0&#39; + h)    m = Math.floor(t / 60 % 60)    m &lt; 10 &amp;&amp; (m = &#39;0&#39; + m)    s = Math.floor(t % 60)    let _thisTemp = this    timer = setInterval(() =&gt; &#123;        s--        s &lt; 10 &amp;&amp; (s = &#39;0&#39; + s)        if (s.length &gt;= 3) &#123;            s = 59            m = (Number(m) - 1)            m &lt; 10 &amp;&amp; (m = &#39;0&#39; + m)        &#125;        if (m.length &gt;= 3) &#123;            m = 59            h = (Number(h) - 1)            h &lt; 10 &amp;&amp; (h = &#39;0&#39; + h)        &#125;        if (h.length &gt;= 3) &#123;            h = &#39;00&#39;            m = &#39;00&#39;            s = &#39;00&#39;            clearInterval(timer)        &#125;        _thisTemp.timerStr = (h + &#39;:&#39; + m + &#39;:&#39; + s)    &#125;, 1000)&#125;</code></pre><h3 id="秒转换时分秒（10-00-00）"><a href="#秒转换时分秒（10-00-00）" class="headerlink" title="秒转换时分秒（10:00:00）"></a>秒转换时分秒（10:00:00）</h3><pre><code class="javascript">handleformatSeconds(value) &#123;    if(!value) &#123;        return 0    &#125;    let second = parseInt(value)    let minute = 0    let hour = 0    if (second &gt; 60) &#123;        minute = parseInt(second / 60)        second = parseInt(second % 60)        if (minute &gt; 60) &#123;            hour = parseInt(minute / 60)            minute = parseInt(minute % 60)        &#125;    &#125;    const result = (parseInt(hour) &gt;= 10 ? parseInt(hour) : &#39;0&#39; + parseInt(hour)) + &#39;:&#39; + (parseInt(minute) &gt;= 10 ? parseInt(minute) : &#39;0&#39; + parseInt(minute)) +&#39;:&#39;+ (parseInt(second) &gt;= 10 ? parseInt(second) : &#39;0&#39; + parseInt(second))    return result&#125;</code></pre><h3 id="时间范围与当前时间前后对比"><a href="#时间范围与当前时间前后对比" class="headerlink" title="时间范围与当前时间前后对比"></a>时间范围与当前时间前后对比</h3><pre><code class="javascript">_handleToCompareTime(tempStartTimeStr, tempEndTimeStr) &#123;    const tempStartTime = new Date(tempStartTimeStr).getTime()    const tempEndTime = new Date(tempEndTimeStr).getTime()    const thisTempTime = new Date().getTime()    if (thisTempTime &lt; tempStartTime) &#123;        console.log(Math.round((tempStartTime - thisTempTime) / 1000 / 60)) // 距离开始剩余时间（minute）        return -1 // 范围前    &#125; else if (thisTempTime &gt; tempStartTime &amp;&amp; thisTempTime &lt; tempEndTime) &#123;        console.log(Math.round((tempEndTime - thisTempTime) / 1000 / 60)) // 距离结束剩余时间（minute）        return 0 // 范围中    &#125; else &#123;        return 1 // 范围后    &#125;&#125;</code></pre><h3 id="判断对比输入日期与当前日期"><a href="#判断对比输入日期与当前日期" class="headerlink" title="判断对比输入日期与当前日期"></a>判断对比输入日期与当前日期</h3><pre><code class="javascript">_handleToCompareTime(dateString) &#123;    if (!dateString) &#123;        return false    &#125;    const currentDate = new Date() // 获取当前日期    const inputDate = new Date(dateString) // 将输入的日期字符串转换为Date对象    if (inputDate &gt; currentDate) &#123;        return false // 如果输入的日期大于当前日期    &#125;    return true // 输入日期小于或等于当前日期&#125;_handleToCompareTime(&#39;2024-05-01&#39;)</code></pre><h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><pre><code class="javascript">dateFormat(date, format) &#123;    const zeroPadding = (i) =&gt; &#123;        return (i &lt; 10 ? &#39;0&#39; : &#39;&#39;) + i    &#125;    return format.replace(/yyyy|MM|dd|HH|mm|ss/g, function (item) &#123;        switch (item) &#123;            case &#39;yyyy&#39;:                return zeroPadding(date.getFullYear())            case &#39;MM&#39;:                return zeroPadding(date.getMonth() + 1)            case &#39;dd&#39;:                return zeroPadding(date.getDate())            case &#39;HH&#39;:                return zeroPadding(date.getHours())            case &#39;mm&#39;:                return zeroPadding(date.getMinutes())            case &#39;ss&#39;:                return zeroPadding(date.getSeconds())        &#125;    &#125;)&#125;dateFormat(new Date(), &#39;yyyy-MM-dd HH:mm:ss&#39;)</code></pre><h3 id="时间格式化-一年前的时间"><a href="#时间格式化-一年前的时间" class="headerlink" title="时间格式化 一年前的时间"></a>时间格式化 一年前的时间</h3><pre><code class="javascript">oldDateFormat(date, format) &#123;    const zeroPadding = (i) =&gt; &#123;        return (i &lt; 10 ? &#39;0&#39; : &#39;&#39;) + i    &#125;    date.setFullYear(date.getFullYear() - 1)    return format.replace(/yyyy|MM|dd|HH|mm|ss/g, function (item) &#123;        switch (item) &#123;            case &#39;yyyy&#39;:                return zeroPadding(date.getFullYear())            case &#39;MM&#39;:                return zeroPadding(date.getMonth() + 1)            case &#39;dd&#39;:                return zeroPadding(date.getDate())            case &#39;HH&#39;:                return zeroPadding(date.getHours())            case &#39;mm&#39;:                return zeroPadding(date.getMinutes())            case &#39;ss&#39;:                return zeroPadding(date.getSeconds())        &#125;    &#125;)&#125;oldDateFormat(new Date(), &#39;yyyy-MM-dd HH:mm:ss&#39;)</code></pre><h3 id="ElementUi日期组件"><a href="#ElementUi日期组件" class="headerlink" title="ElementUi日期组件"></a>ElementUi日期组件</h3><pre><code class="javascript">    // ElementUi组件禁用当前时间前2天后5天以外的内容    disabledDate: (date) =&gt; &#123;        return date.getTime() &lt; Date.now() - 2 * 24 * 60 * 60 * 1000 || date.getTime() &gt; Date.now() + 5 * 24 * 60 * 60 * 1000    &#125;</code></pre><h2 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h2><h3 id="文件流下载"><a href="#文件流下载" class="headerlink" title="文件流下载"></a>文件流下载</h3><pre><code class="javascript">handleReturnDownloadFile(content,filename) &#123;    let eleLink = document.createElement(&#39;a&#39;)    eleLink.download = filename    eleLink.style.display = &#39;none&#39;    // 字符内容转变成blob地址     let url= window.URL.createObjectURL(new Blob([data], &#123; type: &#39;application/octet-stream&#39; &#125;))    eleLink.href = url     // 自动触发点击     document.body.appendChild(eleLink)    eleLink.click()    // 然后移除     document.body.removeChild(eleLink)    //释放    window.URL.revokeObjectURL(url)&#125;</code></pre><h3 id="Base64转img"><a href="#Base64转img" class="headerlink" title="Base64转img"></a>Base64转img</h3><pre><code class="javascript">convertBase64UrlToBlob(urlData) &#123;    let bytes = window.atob(urlData)    // 处理异常,将ascii码小于0的转换为大于0    let ab = new ArrayBuffer(bytes.length)    let ia = new Uint8Array(ab)    for (let i = 0; i &lt; bytes.length; i++) &#123;        ia[i] = bytes.charCodeAt(i)    &#125;    return new Blob([ab], &#123;type: &#39;image/jpg&#39;&#125;)&#125;</code></pre><h3 id="img转Base64"><a href="#img转Base64" class="headerlink" title="img转Base64"></a>img转Base64</h3><pre><code class="javascript">convertBlobToBase64Url(file) &#123;    return new Promise((resolve, reject) =&gt; &#123;        let image = new Image()        image.src = URL.createObjectURL(file)        image.onload = () =&gt; &#123;            let canvas = document.createElement(&#39;canvas&#39;)            let content = canvas.getContext(&#39;2d&#39;)            canvas.width = image.width            canvas.height = image.height            content.drawImage(image, 0, 0, canvas.width, canvas.height)            resolve(canvas.toDataURL(file.type))            canvas.width = canvas.height = 0            content.fillRect(0, 0, 0, 0)            canvas = null            content = null            image = null        &#125;        image.onerror = (event, source, lineno, colno, error) =&gt; &#123;            if (error) &#123;                console.error(event, source, lineno, colno, error)                reject(error)                image = null            &#125;        &#125;    &#125;)&#125;</code></pre><h3 id="获取图片"><a href="#获取图片" class="headerlink" title="获取图片"></a>获取图片</h3><pre><code class="javascript">export function chooseImage(option) &#123;    try &#123;        const imageInput = document.createElement(&#39;input&#39;)        imageInput.type = &#39;file&#39;        imageInput.accept = &#39;image/*&#39;        if (option.sourceType === &#39;camera&#39;) &#123;            imageInput.capture = &#39;environment&#39;        &#125;        imageInput.style.height = &#39;0px&#39;        imageInput.style.width = &#39;0px&#39;        imageInput.style.position = &#39;fixed&#39;        imageInput.style.left = &#39;0px&#39;        imageInput.style.top = &#39;0px&#39;        imageInput.style.visibility = &#39;hidden&#39;        document.getElementsByTagName(&#39;body&#39;)[0].appendChild(imageInput)        imageInput.onchange = async function (e) &#123;            if (e.target.files.length) &#123;                let image = e.target.files[0]                let gifFlag = image.type.includes(&#39;gif&#39;)                // 设置了压缩但是图片为gif图片打印错误提示                if (option.compress &amp;&amp; gifFlag) &#123;                    console.log(&#39;\n&#39;)                    console.warn(&#39;前端不具备压缩gif动图的能力，请服务端处理&#39;);                    console.log(&#39;\n&#39;)                &#125;                // 不是gif图片 设置了压缩 并且 大于1.8M才会触发压缩                const compress = !gifFlag &amp;&amp; option.compress &amp;&amp; image.size &gt; 1572864                // 达到压缩条件开始压缩                if (compress) &#123;                    // 大于1.8M才会触发压缩                    image = await compressImageHandler(image)                &#125;                const result = &#123;                    file: image,                    name: image.name,                    size: image.size,                    path: !compress || gifFlag ? URL.createObjectURL(image) : await imageToBase64Handler(image),                    type: image.type,                &#125;                typeof option.success === &#39;function&#39; &amp;&amp; option.success(result)                typeof option.complete === &#39;function&#39; &amp;&amp; option.complete(result)                imageInput.remove()            &#125;        &#125;        imageInput.click()    &#125; catch (e) &#123;        typeof option.fail === &#39;function&#39; &amp;&amp; option.fail(e)        typeof option.complete === &#39;function&#39; &amp;&amp; option.complete(e)    &#125;&#125;chooseImage(&#123;  success: (data) =&gt; &#123;&#125;&#125;)</code></pre><h3 id="选取视频"><a href="#选取视频" class="headerlink" title="选取视频"></a>选取视频</h3><pre><code class="javascript">export function chooseVideo(option = &#123;&#125;) &#123;    try &#123;        const fileInput = document.createElement(&#39;input&#39;)        fileInput.type = &#39;file&#39;        fileInput.accept = &#39;video/*&#39;        if (option.sourceType === &#39;camera&#39;) &#123;            fileInput.capture = option.camera ? (option.camera === &#39;front&#39; ? &#39;user&#39; : &#39;environment&#39;) : &#39;user&#39;        &#125;        fileInput.style.height = &#39;0px&#39;        fileInput.style.width = &#39;0px&#39;        fileInput.style.position = &#39;fixed&#39;        fileInput.style.left = &#39;0px&#39;        fileInput.style.top = &#39;0px&#39;        fileInput.style.visibility = &#39;hidden&#39;        document.getElementsByTagName(&#39;body&#39;)[0].appendChild(fileInput)        fileInput.onchange = function (e) &#123;            if (e.target.files.length) &#123;                const file = e.target.files[0]                const result = &#123;                    file,                    name: file.name,                    size: file.size,                    path: URL.createObjectURL(file),                    type: file.type,                &#125;                typeof option.success === &#39;function&#39; &amp;&amp; option.success(result)                typeof option.complete === &#39;function&#39; &amp;&amp; option.complete(result)                fileInput.remove()            &#125;        &#125;        fileInput.click()    &#125; catch (e) &#123;        typeof option.fail === &#39;function&#39; &amp;&amp; option.fail(e)        typeof option.complete === &#39;function&#39; &amp;&amp; option.complete(e)    &#125;&#125;chooseVideo(&#123;  success: (data) =&gt; &#123;&#125;&#125;)</code></pre><h2 id="字符串内容"><a href="#字符串内容" class="headerlink" title="字符串内容"></a>字符串内容</h2><h3 id="数字校验"><a href="#数字校验" class="headerlink" title="数字校验"></a>数字校验</h3><pre><code class="javascript">    const a = /[0-9]/.exec(Str) != null ? 1 : 0</code></pre><h3 id="字母校验"><a href="#字母校验" class="headerlink" title="字母校验"></a>字母校验</h3><pre><code class="javascript">    const a = /[a-zA-Z]/.exec(Str) != null ? 1 : 0</code></pre><h3 id="营业执照统一信用编码校验"><a href="#营业执照统一信用编码校验" class="headerlink" title="营业执照统一信用编码校验"></a>营业执照统一信用编码校验</h3><pre><code class="javascript">    const reg = /[0-9A-HJ-NPQRTUWXY]&#123;2&#125;\d&#123;6&#125;[0-9A-HJ-NPQRTUWXY]&#123;10&#125;/.exec(Str)</code></pre><h3 id="字节统计"><a href="#字节统计" class="headerlink" title="字节统计"></a>字节统计</h3><pre><code class="javascript">handleToCountStrLength(str) &#123;    let len = 0    for (let i = 0; i &lt; str.length; i++) &#123;         let c = str.charAt(i)        if (/^[\u0000-\u00ffA-Za-z1-9]+$/.test(c)) &#123;             len += 1        &#125; else &#123;             len += 2        &#125;     &#125;    return len&#125;</code></pre><h3 id="字符串转大写"><a href="#字符串转大写" class="headerlink" title="字符串转大写"></a>字符串转大写</h3><pre><code class="javascript">let str = &#39;abc&#39;str.toUpperCase()console.log(str) // ABC</code></pre><h3 id="键盘输入限制只有大写字母"><a href="#键盘输入限制只有大写字母" class="headerlink" title="键盘输入限制只有大写字母"></a>键盘输入限制只有大写字母</h3><pre><code class="javascript">//  @input=&#39;scope.row.accountNo = handleToCheckValFn(scope.row.accountNo)&#39;_handleToCheckValFn(val) &#123;    const regex = /^[A-Z]+$/ // 只填大写字母    // const regex = /^[0-9]+$/ // 只填数字    let tempStr = &#39;&#39;    for(let i in val) &#123;        if(regex.test(val[i])) &#123;            tempStr += val[i]        &#125;    &#125;    return tempStr&#125;</code></pre><h3 id="普通校验（手机号、邮箱、身份证号）"><a href="#普通校验（手机号、邮箱、身份证号）" class="headerlink" title="普通校验（手机号、邮箱、身份证号）"></a>普通校验（手机号、邮箱、身份证号）</h3><pre><code class="javascript">const validatePhone = (rule, value, callback = () =&gt; &#123;&#125;) =&gt; &#123;    if(!value) &#123;        return callback(new Error(&#39;手机号码不能为空！&#39;))    &#125;    if(!/^1[3456789]\d&#123;9&#125;$/.test(value)) &#123;        return callback(new Error(&#39;手机号码不正确！&#39;))    &#125;    return callback()&#125;const validateEmial = (rule, value, callback = () =&gt; &#123;&#125;) =&gt; &#123;    if(!value) &#123;        return callback(new Error(&#39;邮箱不能为空！&#39;))    &#125;    if(!/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/.test(value)) &#123;        return callback(new Error(&#39;邮箱格式不正确！&#39;))    &#125;    return callback()&#125;const validateIdCard = (rule, value, callback = () =&gt; &#123;&#125;) =&gt; &#123;    if(!value) &#123;        return callback(new Error(&#39;身份证号不能为空！&#39;))    &#125;    if(!/^[1-9]\d&#123;5&#125;(?:18|19|20|21|22)\d&#123;2&#125;(?:0[1-9]|10|11|12)(?:0[1-9]|[1-2]\d|30|31)\d&#123;3&#125;[$/.test(value)) &#123;        return callback(new Error(&#39;身份证号不正确！&#39;))    &#125;    return callback()&#125;</code></pre><h3 id="首字母大写"><a href="#首字母大写" class="headerlink" title="首字母大写"></a>首字母大写</h3><pre><code class="javascript">export function firstChartToUpperCase(str) &#123;    if (typeof str === &#39;string&#39;) &#123;        return str.charAt(0).toUpperCase() + str.substr(1)    &#125;    return str&#125;</code></pre><h3 id="字符串转驼峰"><a href="#字符串转驼峰" class="headerlink" title="字符串转驼峰"></a>字符串转驼峰</h3><pre><code class="javascript">export function stringTurnHump(str, symbol = &#39;-&#39;) &#123;    if (typeof str === &#39;string&#39;) &#123;        return str.split(symbol).map((value, index) =&gt; (index &gt; 0 ? firstChartToUpperCase(value) : value)).join(&#39;&#39;)    &#125;    return str&#125;</code></pre><h3 id="css字符串转JS对象"><a href="#css字符串转JS对象" class="headerlink" title="css字符串转JS对象"></a>css字符串转JS对象</h3><pre><code class="javascript">export function stringTurnObjectForCSS(cssString) &#123;    if (cssString) &#123;        return Object.fromEntries(cssString.split(&#39;;&#39;).map((value) =&gt; value.split(&#39;:&#39;).map((val, index) =&gt; (index === 0 ? stringTurnHump(val) : val))))    &#125;    return cssString&#125;</code></pre><h3 id="手机号脱敏"><a href="#手机号脱敏" class="headerlink" title="手机号脱敏"></a>手机号脱敏</h3><pre><code class="javascript">export function formatPhone(phoneNumber) &#123;    const result = checkPhoneNumber(phoneNumber)    if (result.success) &#123;        return phoneNumber.toString().replace(/(.&#123;4&#125;)(.&#123;4&#125;)(.&#123;3&#125;)/, &#39;$1****$3&#39;)    &#125;    return result.message&#125;</code></pre><h3 id="脱敏银行卡号"><a href="#脱敏银行卡号" class="headerlink" title="脱敏银行卡号"></a>脱敏银行卡号</h3><pre><code class="javascript">export function desensitizeBankCardNumber(cardNumber) &#123;    const str = String(cardNumber)    return str.substring(str.length - 4)&#125;</code></pre><h3 id="金额转换千分位格式"><a href="#金额转换千分位格式" class="headerlink" title="金额转换千分位格式"></a>金额转换千分位格式</h3><pre><code class="javascript">/** * 金额转换千分位格式 * @param money 需转换的金额 * @param fixedLength &#123;number|null&#125; 保留几位小数 false 不处理 * @returns &#123;string|*&#125; */export function convertThousandth(money, fixedLength = null) &#123;    if (isNaN(Number(money))) &#123;        return money    &#125;    let _money = Number(money).toString()    if (typeof fixedLength === &#39;number&#39; &amp;&amp; !isNaN(fixedLength)) &#123;        _money = toFixed(money, fixedLength)    &#125;    if (_money.indexOf(&#39;.&#39;) === -1) &#123;        return _money.replace(/\B(?=(?:\d&#123;3&#125;)+\b)/g, &#39;,&#39;)    &#125;    return _money.replace(/(\d)(?=(\d&#123;3&#125;)+\.)/g, &#39;$1,&#39;)&#125;</code></pre><h3 id="身份证号校验（号码-区号）"><a href="#身份证号校验（号码-区号）" class="headerlink" title="身份证号校验（号码+区号）"></a>身份证号校验（号码+区号）</h3><pre><code class="javascript">const areaCode = &#39;1100,1101,1102,1200,1201,1202,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1522,1525,1526,1529,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2200,2201,2202,2203,2204,2205,2206,2207,2208,2224,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2327,3100,3101,3102,3200,3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3400,3401,3402,3403,3404,3405,3406,3407,3408,3410,3411,3412,3413,3414,3415,3416,3417,3418,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4200,4201,4202,4203,4205,4206,4207,4208,4209,4210,4211,4212,4213,4228,4290,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4331,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4412,4413,4414,4415,4416,4417,4418,4419,4420,4451,4452,4453,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4600,4601,4602,4690,5000,5001,5002,5003,5100,5101,5103,5104,5105,5106,5107,5108,5109,5110,5111,5113,5114,5115,5116,5117,5118,5119,5120,5132,5133,5134,5200,5201,5202,5203,5204,5222,5223,5224,5226,5227,5300,5301,5303,5304,5305,5306,5307,5308,5309,5323,5325,5326,5328,5329,5331,5333,5334,5400,5401,5421,5422,5423,5424,5425,5426,6100,6101,6102,6103,6104,6105,6106,6107,6108,6109,6110,6200,6201,6202,6203,6204,6205,6206,6207,6208,6209,6210,6211,6226,6229,6230,6300,6301,6321,6322,6323,6325,6326,6327,6328,6400,6401,6402,6403,6404,6405,6500,6501,6502,6521,6522,6523,6527,6528,6529,6530,6531,6532,6540,6542,6543,6590,7100,8100,8200&#39;const validateIdCard = (rule, value, callback = () =&gt; &#123;&#125;) =&gt; &#123;    if(!value) &#123;        return callback(new Error(&#39;身份证号不能为空！&#39;))    &#125;    if(!/^[1-9]\d&#123;5&#125;(?:18|19|20|21|22)\d&#123;2&#125;(?:0[1-9]|10|11|12)(?:0[1-9]|[1-2]\d|30|31)\d&#123;3&#125;[\dX]$/.test(value)) &#123;        return callback(new Error(&#39;身份证号不正确！&#39;))    &#125;    // 前4位区号有效验证    if(!areaCode.includes(value.slice(0, 3))) &#123;        return callback(new Error(&#39;身份证号不正确！&#39;))    &#125;    return callback()&#125;</code></pre><h3 id="根据身份证号计算内容"><a href="#根据身份证号计算内容" class="headerlink" title="根据身份证号计算内容"></a>根据身份证号计算内容</h3><pre><code class="javascript">computeIdCardFn(IdCard, type) &#123;    if(!IdCard) &#123;        return &#39;&#39;    &#125;    if (type === 1) &#123;        // 获取出生日期        let birthday = IdCard.substring(6, 10) + &#39;-&#39; + IdCard.substring(10, 12) + &#39;-&#39; + IdCard.substring(12, 14)        return birthday    &#125;    if (type === 2) &#123;        let sex = &#39;&#39;        // 获取性别        if (parseInt(IdCard.substr(16, 1)) % 2 === 1) &#123;            sex = &#39;男&#39;        &#125;else &#123;            sex = &#39;女&#39;        &#125;        return sex    &#125;    if (type === 3) &#123;        // 获取年龄        let ageDate = new Date()        let month = ageDate.getMonth() + 1        let day = ageDate.getDate()        let age = ageDate.getFullYear() - IdCard.substring(6, 10) - 1        if (IdCard.substring(10, 12) &lt; month || IdCard.substring(10, 12) === month &amp;&amp; IdCard.substring(12, 14) &lt;= day) &#123;            age++        &#125;        if (age &lt;= 0) &#123;            age = 1        &#125;        return age    &#125;&#125;</code></pre><h2 id="VUE加载自动触发元素点击事件"><a href="#VUE加载自动触发元素点击事件" class="headerlink" title="VUE加载自动触发元素点击事件"></a>VUE加载自动触发元素点击事件</h2><h3 id="SubTemplate"><a href="#SubTemplate" class="headerlink" title="SubTemplate"></a>SubTemplate</h3><pre><code class="javascript">directives: &#123;    trigger: &#123;        triggerFlag: false,        inserted(el,binging) &#123;            if(binging.def.triggerFlag) &#123;                return            &#125;            el.click()            binging.def.triggerFlag = true        &#125;    &#125;&#125;,methods: &#123;&#125;,</code></pre><h2 id="Javascript数组内容"><a href="#Javascript数组内容" class="headerlink" title="Javascript数组内容"></a>Javascript数组内容</h2><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><pre><code class="javascript">// 过滤let numArr = [0, 1, 2, 3, 4, 5, 6, 7]let res = numArr.filter(num =&gt; num &gt;= 5)console.log(res) // [5, 6, 7]</code></pre><h3 id="重复判断"><a href="#重复判断" class="headerlink" title="重复判断"></a>重复判断</h3><pre><code class="javascript">// 判断数组中是否有重复内容let tempArr = [1, 2, 2, 3]Array.from(new Set(tempArr)).length &lt; tempArr.length</code></pre><h3 id="数组内容移动"><a href="#数组内容移动" class="headerlink" title="数组内容移动"></a>数组内容移动</h3><pre><code class="javascript">// 上移this.tempArr[index] = this.tempArr.splice(index - 1, 1, this.tempArr[index])[0]// 下移this.tempArr[index] = this.tempArr.splice(index + 1, 1, this.tempArr[index])[0]</code></pre><h2 id="页面事件监听"><a href="#页面事件监听" class="headerlink" title="页面事件监听"></a>页面事件监听</h2><h3 id="监听离开"><a href="#监听离开" class="headerlink" title="监听离开"></a>监听离开</h3><pre><code class="javascript">fn() &#123;    // 离开时监听触发&#125;// PC端window.addEventListener(&#39;blur&#39;, this.fn)window.removeEventListener(&#39;blur&#39;, this.fn)// 移动端window.addEventListener(&#39;visibilitychange&#39;, this.fn)window.removeEventListener(&#39;visibilitychange&#39;, this.fn)</code></pre><h2 id="Css内容"><a href="#Css内容" class="headerlink" title="Css内容"></a>Css内容</h2><h3 id="线性渐变背景颜色"><a href="#线性渐变背景颜色" class="headerlink" title="线性渐变背景颜色"></a>线性渐变背景颜色</h3><pre><code class="css">/* css线性渐变背景颜色 */background: linear-gradient(to right , #ffce7b, #ff6609);</code></pre><h3 id="右上角三角标"><a href="#右上角三角标" class="headerlink" title="右上角三角标"></a>右上角三角标</h3><pre><code class="css">/* css右上角三角标 */background-image: linear-gradient(225deg, #f44336 20%, #00dd00 20%);</code></pre><h2 id="移动端Debug"><a href="#移动端Debug" class="headerlink" title="移动端Debug"></a>移动端Debug</h2><pre><code class="html">&lt;script src=&quot;https://unpkg.com/vconsole@latest/dist/vconsole.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;     // VConsole 默认会挂载到 `window.VConsole` 上    var vConsole = new window.VConsole();&lt;/script&gt;</code></pre><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><pre><code class="sh">    # 生成公钥私钥配对    $ ssh-keygen -t ed25519 -C &quot;邮箱&quot;    # git基础信息设置    $ git config --global user.name &quot;&quot;    $ git config --global user.email &quot;&quot;</code></pre><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><hr><pre><code>. - 除换行符以外的所有字符。^ - 字符串开头。$ - 字符串结尾。\d, \w, \s - 匹配数字、字符、空格。\D, \W, \S - 匹配非数字、非字符、非空格。[abc] - 匹配 a、b 或 c 中的一个字母。[a-z] - 匹配 a 到 z 中的一个字母。[^abc] - 匹配除了 a、b 或 c 中的其他字母。aa|bb - 匹配 aa 或 bb。? - 0 次或 1 次匹配。* - 匹配 0 次或多次。+ - 匹配 1 次或多次。&#123;n&#125; - 匹配 n次。&#123;n, &#125; - 匹配 n次以上。&#123;m, n&#125; - 最少 m 次，最多 n 次匹配。(expr) - 捕获 expr 子模式,以 \1 使用它。(?:expr) - 忽略捕获的子模式。(?=expr) - 正向预查模式 expr。(?!expr) - 负向预查模式 expr。</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Media Server</title>
      <link href="/2024/05/01/media-server/"/>
      <url>/2024/05/01/media-server/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于推流、拉流命令行控制及开发依赖<br>&#x2F;&#x2F; 后管地址 127.0.0.1:8000&#x2F;admin&#x2F;<br>&#x2F;&#x2F; 接口：<a href="http://127.0.0.1:8000/api/server">http://127.0.0.1:8000/api/server</a> &#x2F;&#x2F; 性能线程监控<br>&#x2F;&#x2F; 接口：<a href="http://127.0.0.1:8000/api/streams">http://127.0.0.1:8000/api/streams</a> &#x2F;&#x2F; 查询推流列表</p></blockquote><h2 id="ffmpeg-shell-x2F-cmd"><a href="#ffmpeg-shell-x2F-cmd" class="headerlink" title="ffmpeg(shell&#x2F;cmd)"></a>ffmpeg(shell&#x2F;cmd)</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><pre><code class="shell">    # dshow可以用来抓取摄像头、采集卡、麦克风等，vfwcap主要用来采集摄像头类设备，gdigrab则是抓取Windows窗口程序    ffmpeg -list_devices true -f dshow -i dummy # 查询可用dshow设备    -f vfwcap -i &quot;0&quot; # 启用摄像头    -f gdigrab -i desktop 启用桌面录制 -f gdigrab -i title=&quot;&quot; # 启用应用录制    -f dshow -i video=&quot;&quot; 指定video设备 -f dshow -i audio=&quot;&quot; # 指定audio设备    -re -stream_loop -1 # 重复    -vcodec libx264 -preset ultrafast # video指定解码配置    -acodec libmp3lame -ar 44100 -ac 1 # audio指定解码配置    -c:v libx264 -preset ultrafast  # vfwcap摄像头使用video配置</code></pre><h3 id="RTMP协议推流"><a href="#RTMP协议推流" class="headerlink" title="RTMP协议推流"></a>RTMP协议推流</h3><pre><code class="shell">    # 重复推流test.mp4至rtmp接口    ffmpeg -re -stream_loop -1 -i test.mp4 -vcodec libx264 -preset ultrafast -f flv rtmp://localhost:1935/stream/test    # 摄像头推流至rtmp接口（不包含acodec）    ffmpeg -f vfwcap  -i &quot;0&quot; -c:v libx264 -preset ultrafast -f flv rtmp://localhost:1935/media/home    # 桌面desktop推流至rtmp接口（不包含acodec）    ffmpeg -f gdigrab -i desktop -vcodec libx264 -preset ultrafast -f flv rtmp://192.168.52.51:1935/media/home</code></pre><h3 id="ffmpeg本地"><a href="#ffmpeg本地" class="headerlink" title="ffmpeg本地"></a>ffmpeg本地</h3><pre><code class="shell">    # 从视频中提取音频    ffmpeg.exe -i aa.mp4 -vn -c:a copy output.aac    # -vn 表示去掉视频， -c:a copy表示不改变音频编码，直接拷贝。    # 进行指定时间截图    ffmpeg.exe -ss 0:8:34 -i aa.mp4 -vframes 1 -q:v 2 output.jpg    # -vframes1表示只截取一帧， -q:v2表示输出的图片质量，通常范围在1到5之间（1 为最高质量）    # 为音频添加封面    ffmpeg -loop 1 -i cover.jpg -i input.mp3 -c:v libx264 -c:a aac -b:a 192k -shortest output.mp4    # 以上命令中，有两个输入文件，一个是封面图片 cover.jpg，另一个是音频文件 input.mp3。-loop1参数表示图片无限循环，  -shortest参数表示音频文件结束时，输出视频也随之结束。    # MP4 转 M3U8    ffmpeg -i input.mp4 -c:v libx264 -c:a aac -strict -2 -f hls -hlslistsize 2 -hls_time 15 output.m3u8    # 该命令将 input.mp4 视频文件每15秒生成一个 ts 文件，并最后生成一个 m3u8 文件，m3u8 文件则作为 ts 的索引文件。    # 屏幕录制并保存成文件    ffmpeg -f gdigrab -i desktop eguid.mp4    # 转流（rtsp转rtmp为例）    ffmpeg -i rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov -rtsp_transport tcp -vcodec h264 -acodec aac -f flv rtmp://localhost:1935/rtmp/eguid    # 拉流    ffmpeg -i rtmp://eguid.cc:1935/rtmp/eguid -vcodec h264 -f flv -acodec aac -ac 2 eguid.flv</code></pre><h2 id="win命令控制"><a href="#win命令控制" class="headerlink" title="win命令控制"></a>win命令控制</h2><pre><code class="shell">    # 命令前+start新开命令窗口执行    tasklist # 查询所有进程    tasklist /fi &quot;imagename eq ffmpeg.exe&quot; # 根据名字查询进程    taskkill /f /im ffmpeg.exe # 根据进程名结束进程    taskkill /pid 13044 -f # 根据pid值结束进程</code></pre>]]></content>
      
      
      <categories>
          
          <category> ffmpeg </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django</title>
      <link href="/2024/05/01/django/"/>
      <url>/2024/05/01/django/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于Python的服务端框架-Django(有大量的基础服务内容，可创建多模块分配)。<br>当前使用环境：python –version 3.11.1、pip –version 23.3.1。</p></blockquote><h2 id="安装Django-及-其他依赖包"><a href="#安装Django-及-其他依赖包" class="headerlink" title="安装Django 及 其他依赖包"></a>安装Django 及 其他依赖包</h2><pre><code class="shell">pip install django # 框架依赖包 version 4.2.7pip install django-cors-headers # 处理跨域的依赖包pip install pymysql # mysql模块依赖包</code></pre><h2 id="依赖记录"><a href="#依赖记录" class="headerlink" title="依赖记录"></a>依赖记录</h2><pre><code class="shell"># 创建依赖记录pip freeze &gt; requirements.txt# 依赖记录安装pip install -r requirements.txt</code></pre><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><pre><code class="shell">Django-admin startproject templateName</code></pre><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="处理跨域访问"><a href="#处理跨域访问" class="headerlink" title="处理跨域访问"></a>处理跨域访问</h3><pre><code class="python"># 基础配置文件配置以下内容ALLOWED_HOSTS = [&#39;*&#39;]CORS_ALLOW_CREDENTIALS = TrueCORS_ORIGIN_ALLOW_ALL = TrueCORS_ORIGIN_WHITELIST = (&#39;http://localhost&#39;, &#39;http://127.0.0.1&#39;, &#39;http://0.0.0.0&#39;)SECURE_CROSS_ORIGIN_OPENER_POLICY = None # 默认值为same-originCORS_ALLOW_METHODS = (    &#39;DELETE&#39;,    &#39;GET&#39;,    &#39;OPTIONS&#39;,    &#39;PATCH&#39;,    &#39;POST&#39;,    &#39;PUT&#39;,    &#39;VIEW&#39;,)CORS_ALLOW_HEADERS = (&#39;*&#39;,)</code></pre><h3 id="模块创建"><a href="#模块创建" class="headerlink" title="模块创建"></a>模块创建</h3><pre><code class="shell">python manage.py startapp AppOne # 创建AppOne模块python manage.py startapp AppTwo # 创建AppTwo模块</code></pre><h3 id="模块注册"><a href="#模块注册" class="headerlink" title="模块注册"></a>模块注册</h3><pre><code class="python"># 模块创建完成后需要注册INSTALLED_APPS = [    &#39;django.contrib.admin&#39;,    &#39;django.contrib.auth&#39;,    &#39;django.contrib.contenttypes&#39;,    &#39;django.contrib.sessions&#39;,    &#39;django.contrib.messages&#39;,    &#39;django.contrib.staticfiles&#39;,    &#39;AppOne.apps.ApponeConfig&#39;, #注册AppOne    &#39;AppTwo.apps.ApptwoConfig&#39;, #注册AppTwo]</code></pre><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><pre><code class="python"># __init__.pyimport pymysql  # 导入第三方模块，用来操作mysql数据库pymysql.install_as_MySQLdb()# settings.pyDATABASES = &#123;    &#39;default&#39;: &#123;        # django默认数据库        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,        &#39;NAME&#39;: BASE_DIR / &#39;db.sqlite3&#39;,        # mysql远程数据库        # &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;, # 更改为mysql        # &#39;NAME&#39;: &#39;example&#39;, # testsql数据库名        # &#39;USER&#39;: &#39;example&#39;, # 数据库的用户名        # &#39;PASSWORD&#39;: &#39;example123&#39;, # 密码        # &#39;HOST&#39;: &#39;*.*.*.*&#39;,        # &#39;PORT&#39;: &#39;3306&#39;, # 端口号，默认为3306    &#125;&#125;</code></pre><h3 id="Django模型"><a href="#Django模型" class="headerlink" title="Django模型"></a>Django模型</h3><pre><code class="python"># 定义AppOne的模型  /&gt;AppOne&gt;models.pyfrom django.db import models# Create your models here.class Book(models.Model):    id = models.AutoField(primary_key=True) # id 会自动创建,可以手动写入    title = models.CharField(max_length=32) # 书籍名称    price = models.DecimalField(max_digits=5, decimal_places=2) # 书籍价格    publish = models.CharField(max_length=32) # 出版社名称    pub_date = models.DateField() # 出版时间</code></pre><pre><code class="shell">python manage.py makemigrations AppOne # 映射AppOne的modelspython manage.py migrate 同步AppOne的models到数据库</code></pre><h3 id="后台管理员配置"><a href="#后台管理员配置" class="headerlink" title="后台管理员配置"></a>后台管理员配置</h3><pre><code class="shell"># 需要先映射同步数据库python manage.py makemigrations 映射modelspython manage.py migrate 同步到数据库# 创建超级用户python manage.py createsuperuser# http://ip:端口/admin/ 访问后台</code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre><code class="shell">python manage.py runserver 0.0.0.0:5000 # 启动到局域网内5000端口python manage.py runserver 127.0.0.1:5000 # 启动到本地5000端口</code></pre><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><pre><code class="python"># urls.pyfrom django.urls import path, include # include用于多项目时分发from django.contrib import adminurlpatterns = [    path(&#39;admin/&#39;, admin.site.urls),    path(&quot;user/&quot;, include(&quot;user.urls&quot;)),]</code></pre><h2 id="模块视图"><a href="#模块视图" class="headerlink" title="模块视图"></a>模块视图</h2><h3 id="子路由配置"><a href="#子路由配置" class="headerlink" title="子路由配置"></a>子路由配置</h3><pre><code class="python"># /&gt;AppOne&gt;urls.pyfrom django.urls import pathfrom django.urls import re_path # 用re_path 需要引入from AppOne import viewsurlpatterns = [    path(&#39;search/&#39;, views.searchUser), # 普通路径    re_path(r&#39;^index1/([0-9]&#123;4&#125;)/$&#39;, views.index1), # 正则路径（无名分组）http://127.0.0.1:5000/user/index1/2023/    re_path(&quot;^index2/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$&quot;, views.index2), # 正则路径（路由形参）http://127.0.0.1:5000/user/index2/2023/05/    # r:代表的是原生字符串（raw）    # ^:代表以什么开头    # $:代表的是以什么结尾    # /article/list/(year)/    # 在正则表达式中定义一个变量，参数，就需要用（）进行捕获参数。    # 给捕获的参数去一个名字，就可以使用&lt;&gt;,（?P&lt;year&gt;）    # \d:代表是0-9之间的数字    # &#123;4&#125;：代表的是这样的数字有4个。    # 在我们的$符号前面有一个/，代表的是要以/结尾。]</code></pre><h3 id="子模型注册Admin"><a href="#子模型注册Admin" class="headerlink" title="子模型注册Admin"></a>子模型注册Admin</h3><pre><code class="python"># /&gt;AppOne&gt;admin.pyfrom django.contrib import adminfrom user.models import Book # Register your models here.admin.site.register([Book])</code></pre><h3 id="视图内容"><a href="#视图内容" class="headerlink" title="视图内容"></a>视图内容</h3><pre><code class="python"># /&gt;AppOne&gt;views.pyfrom django.shortcuts import render# Create your views here.from django.http import HttpResponse, JsonResponsefrom django.core import serializers # 格式化json serializers.serialize(&quot;json&quot;, models.Book.objects.all())from user import modelsimport jsondef searchUser(request):    # 请求接口返回示例    if request.method == &quot;GET&quot;:        # GET        name = request.GET.get(&#39;name&#39;)        return HttpResponse(&quot;user：&quot; + name)    elif request.method == &quot;POST&quot;:        # POST        name = request.POST.get(&#39;name&#39;)        return HttpResponse(&quot;user：&quot; + name)  # 字符串作为返回内容    def index1(request, year):    # 请求接口返回示例    return HttpResponse(year) # 一个形参代表路径中一个分组的内容，按关键字对应匹配def index2(request, year, month):    # 请求接口返回示例    return HttpResponse(year + &#39;-&#39; + month) # 一个形参代表路径中一个分组的内容，按关键字对应匹配</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DrissionPage</title>
      <link href="/2024/05/01/drissionpage/"/>
      <url>/2024/05/01/drissionpage/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DrissionPage 是一个基于 python 的网页自动化工具。它既能控制浏览器，也能收发数据包，还能把两者合而为一。可兼顾浏览器自动化的便利性和 requests 的高效率。它功能强大，内置无数人性化设计和便捷功能。它的语法简洁而优雅，代码量少，对新手友好。</p></blockquote><h2 id="1-运行环境"><a href="#1-运行环境" class="headerlink" title="1. 运行环境"></a>1. 运行环境</h2><p>操作系统：Windows、Linux 或 Mac。<br>python 版本：3.6 及以上<br>支持浏览器：Chromium 内核（如 Chrome 和 Edge）</p><h2 id="2-pip安装及升级"><a href="#2-pip安装及升级" class="headerlink" title="2. pip安装及升级"></a>2. pip安装及升级</h2><pre><code class="shell">pip install DrissionPage # pip安装DrissionPagepip install DrissionPage --upgrade # pip升级DrissionPage</code></pre><h2 id="3-基本内容"><a href="#3-基本内容" class="headerlink" title="3. 基本内容"></a>3. 基本内容</h2><p>页面类用于控制浏览器，或收发数据包，是最主要的工具。DrissionPage 包含三种主要页面类。根据须要在其中选择使用。</p><h3 id="3-1-WebPage"><a href="#3-1-WebPage" class="headerlink" title="3.1 WebPage"></a>3.1 WebPage</h3><pre><code>功能最全面的页面类，既可控制浏览器，也可收发数据包(包含了ChromiumPage和SessionPage)通过change_mode()方法切换模式(ChromiumPage: &#39;d&#39;, SessionPage: &#39;s&#39;)```pythonfrom DrissionPage import WebPage```</code></pre><h3 id="3-2-ChromiumPage"><a href="#3-2-ChromiumPage" class="headerlink" title="3.2 ChromiumPage"></a>3.2 ChromiumPage</h3><pre><code>用于只控制浏览器```pythonfrom DrissionPage import ChromiumPage```</code></pre><h3 id="3-3-SessionPage"><a href="#3-3-SessionPage" class="headerlink" title="3.3 SessionPage"></a>3.3 SessionPage</h3><pre><code>用于只收发数据包```pythonfrom DrissionPage import SessionPage```</code></pre><h2 id="4-配置工具"><a href="#4-配置工具" class="headerlink" title="4. 配置工具"></a>4. 配置工具</h2><p>很多时候我们须要设置启动参数，可导入以下两个类，但不是必须的。</p><h3 id="4-1-ChromiumOptions类"><a href="#4-1-ChromiumOptions类" class="headerlink" title="4.1 ChromiumOptions类"></a>4.1 ChromiumOptions类</h3><pre><code>用于设置浏览器启动参数```pythonfrom DrissionPage import ChromiumOptions```</code></pre><h3 id="4-2-SessionOptions类"><a href="#4-2-SessionOptions类" class="headerlink" title="4.2 SessionOptions类"></a>4.2 SessionOptions类</h3><pre><code>用于设置Session对象启动参数```pythonfrom DrissionPage import SessionOptions```</code></pre><h3 id="4-3-Settings"><a href="#4-3-Settings" class="headerlink" title="4.3 Settings"></a>4.3 Settings</h3><pre><code>用于设置全局配置```pythonfrom DrissionPage.common import Settings```</code></pre><h2 id="5-其他工具"><a href="#5-其他工具" class="headerlink" title="5. 其他工具"></a>5. 其他工具</h2><p>可能需要用到的工具，需要时可以导入。</p><h3 id="5-1-动作链"><a href="#5-1-动作链" class="headerlink" title="5.1 动作链"></a>5.1 动作链</h3><pre><code>用于模拟一系列键盘和鼠标的操作```pythonfrom DrissionPage.common import ActionChains```</code></pre><h3 id="5-2-键盘按键类"><a href="#5-2-键盘按键类" class="headerlink" title="5.2 键盘按键类"></a>5.2 键盘按键类</h3><pre><code>用于键入 ctrl、alt 等按键```pythonfrom DrissionPage.common import Keys```</code></pre><h3 id="5-3-By类"><a href="#5-3-By类" class="headerlink" title="5.3 By类"></a>5.3 By类</h3><pre><code>便于项目迁移```pythonfrom DrissionPage.common import By```</code></pre><h3 id="5-4-浏览器数据包监听器"><a href="#5-4-浏览器数据包监听器" class="headerlink" title="5.4 浏览器数据包监听器"></a>5.4 浏览器数据包监听器</h3><pre><code>```pythonfrom DrissionPage.common import Listener, RequestMan```</code></pre><h3 id="5-5-easy-set"><a href="#5-5-easy-set" class="headerlink" title="5.5 easy_set"></a>5.5 easy_set</h3><pre><code>保存了一些便捷的 ini 文件设置方法，可选择使用```pythonfrom DrissionPage.easy_set import *```</code></pre><h2 id="6-导入异常"><a href="#6-导入异常" class="headerlink" title="6. 导入异常"></a>6. 导入异常</h2><pre><code>异常放在以下路径```pythonfrom DrissionPage.errors import ElementNotFoundError```</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DrissionPage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状表Sql</title>
      <link href="/2024/05/01/treesql/"/>
      <url>/2024/05/01/treesql/</url>
      
        <content type="html"><![CDATA[<blockquote><p>只记录了左右值和路径值的树型结构，个人感觉路径值更好用一点</p></blockquote><h2 id="左右值-lft-rgt"><a href="#左右值-lft-rgt" class="headerlink" title="左右值(lft, rgt)"></a>左右值(lft, rgt)</h2><blockquote><p>查询很好用，但是新增删除时需要操作执行整个表的内容，存储失败时难以回滚，还会有并发冲突的问题，只适合内容稳定修改较少的表类型</p></blockquote><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><pre><code class="java">// +----+-------------+-------+--------+-----+-----+----------+-------------+// | id | name        | value | type   | lft | rgt | parentId | valuePrefix |// +----+-------------+-------+--------+-----+-----+----------+-------------+// |  1 | SYSTEM_NAME | 0     | system |   1 |  28 | NULL     | sys:        |// |  2 | 系统维护    | 0     | menu   |   2 |  21 |        1 | sys:0:      |// |  3 | 人员管理    | 1     | page   |  22 |  27 |        1 | sys:0:      |// |  4 | 组织管理    | 0     | page   |   3 |   4 |        2 | sys:0:0:    |// |  5 | 角色管理    | 1     | page   |   5 |  10 |        2 | sys:0:0:    |// |  6 | 权限管理    | 2     | page   |  11 |  16 |        2 | sys:0:0:    |// |  7 | 操作日志    | 3     | page   |  17 |  18 |        2 | sys:0:0:    |// |  8 | 系统设置    | 4     | page   |  19 |  20 |        2 | sys:0:0:    |// |  9 | 新增        | 0     | button |   6 |   7 |        5 | sys:0:0:1:  |// | 10 | 新增        | 0     | button |  12 |  13 |        6 | sys:0:0:2:  |// | 11 | 编辑        | 1     | button |   8 |   9 |        5 | sys:0:0:1:  |// | 12 | 编辑        | 1     | button |  14 |  15 |        6 | sys:0:0:2:  |// | 13 | 新增        | 0     | button |  23 |  24 |        3 | sys:0:1:    |// | 14 | 编辑        | 1     | button |  25 |  26 |        3 | sys:0:1:    |// +----+-------------+-------+--------+-----+-----+----------+-------------+SET @lft := 7;/*新部门的左值*/SET @rgt := 8;/*新部门的右值*/SET @level := 5;/*新部门的层级*/begin;/*将插入的后续边缘的节点左右数+2*/UPDATE department SET lft=lft+2 WHERE lft &gt; @lft;UPDATE department SET rgt=rgt+2 WHERE rgt &gt;= @lft;/*插入数据*/INSERT INTO department(name,lft,rgt,level) VALUES(&#39;新部门&#39;,@lft,@rgt,level);/*新增影响行数为0时，必须回滚*/commit;/*rollback;*/</code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre><code class="java">SET @lft := 7;/*要删除的节点左值*/SET @rgt := 8;/*要删除的节点右值*/begin;UPDATE department SET lft=lft-2 WHERE lft &gt; @lft;UPDATE department SET rgt=rgt-2 WHERE rgt &gt; @lft;/*删除节点*/DELETE FROM department WHERE lft=@lft AND rgt=@rgt;/*删除影响行数为0时，必须回滚*/commit;/*rollback*/</code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="查询所有子孙"><a href="#查询所有子孙" class="headerlink" title="查询所有子孙"></a>查询所有子孙</h4><pre><code class="java">SET @lft := 9;SET @rgt := 18;SELECT * FROM department WHERE lft BETWEEN @lft AND @rgt ORDER BY lft ASC;// `SELECT user_name FROM temp_pro_user WHERE lft &gt;= @lft AND lft &lt;= @rgt ORDER BY lft ASC`;/*例子中用BETWEEN将被查部门本身也查了出来。实际中可以用大于小于*/</code></pre><h4 id="查询下属总数"><a href="#查询下属总数" class="headerlink" title="查询下属总数"></a>查询下属总数</h4><pre><code class="java">// 总数 = (右值 - 左值 - 1) / 2</code></pre><h4 id="查询一级下属"><a href="#查询一级下属" class="headerlink" title="查询一级下属"></a>查询一级下属</h4><pre><code class="java">SET @level := 2;/*总经理的level*/SET @lft := 2;/*总经理的左值*/SET @rgt := 19;/*总经理的右值*/SELECT * FROM department WHERE lft &gt; @lft AND rgt &lt; @rgt AND level = @level+1;</code></pre><h4 id="查询祖链路径"><a href="#查询祖链路径" class="headerlink" title="查询祖链路径"></a>查询祖链路径</h4><pre><code class="java">SET @lft := 3;/*产品部左值*/SET @rgt := 8;/*产品部右值*/SELECT * FROM department WHERE lft &lt; @lft AND rgt &gt; @rgt ORDER BY lft ASC;</code></pre><h4 id="查询后转成树结构"><a href="#查询后转成树结构" class="headerlink" title="查询后转成树结构"></a>查询后转成树结构</h4><pre><code class="javascript">let list = [//模拟sql查出来的列表。    &#123;id:1,name:&#39;root&#39;,lft:1,rgt:8,level:1&#125;,    &#123;id:2,name:&#39;child&#39;,lft:2,rgt:7,level:2&#125;,    &#123;id:3,name:&#39;grandson&#39;,lft:3,rgt:4,level:3&#125;,    &#123;id:4,name:&#39;grandson2&#39;,lft:5,rgt:6,level:3&#125;];let rights = [] /*类似于一个栈结构（后进先出）*/let mp = &#123;&#125;//list.sort((a,b) =&gt; a.lft - b.lft)//如果你在sql中没有进行排序，需要在这里给他排序。list.forEach(item =&gt; &#123;    if(rights.length &gt; 0) &#123;        while(rights[rights.length-1] &lt; item.rgt) &#123;            rights.splice(-1, 1)//从rights末尾去除        &#125;    &#125;    let _level = rights.length;    item._level = _level;    mp[_level] = item.id    item.parent_id = _level - 1 in mp ? mp[_level - 1] : null;//计算出上级部门编号    item.is_leaf = item.lft === item.rgt - 1;//判断是否叶子部门    rights.push(item.rgt)&#125;)/*上级部门计算出来了，和存parent_id的效果就一样了，后面只需要递归即可*//*递归函数 示例*/let recursive = (_list, parent_id = null) =&gt; &#123;    let _tree = [];    _list.forEach(item =&gt; &#123;        if(item.parent_id === parent_id) &#123;            let childs = recursive(_list, item.id)            _tree.push(&#123;                ...item,                children: childs.length &gt; 0 ? childs : (item.isLeaf ? null : [])            &#125;)        &#125;    &#125;)    return _tree&#125;console.log(recursive(list))</code></pre><h2 id="路径值（1-x2F-2-x2F-3-x2F-4-x2F-5-x2F-6-x2F-…）"><a href="#路径值（1-x2F-2-x2F-3-x2F-4-x2F-5-x2F-6-x2F-…）" class="headerlink" title="路径值（1&#x2F;2&#x2F;3&#x2F;4&#x2F;5&#x2F;6&#x2F;…）"></a>路径值（1&#x2F;2&#x2F;3&#x2F;4&#x2F;5&#x2F;6&#x2F;…）</h2><blockquote><p>查询难度低，需要拼接path内容，存储基本不会出现并发冲突</p></blockquote><h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><pre><code class="java">// +----+----------+------------+// | id | userName | path       |// +----+----------+------------+// |  1 | Admin    | 0          |// |  2 | Ron      | 0/1        |// |  3 | Ron0     | 0/1/2      |// |  4 | Bio      | 0/1        |// |  5 | Ron1     | 0/1/2      |// |  6 | Bio0     | 0/1/4      |// |  7 | Bio00    | 0/1/4/6    |// |  8 | Bio000   | 0/1/4/6/7  |// +----+----------+------------+// 查询所有子结构内容(当前id: 2)const @userPath = user.path + &#39;/&#39; + user.id + &#39;%&#39;SELECT name FROM TABLENAME WHERE path like @userPath// 查询所有父结构内容(当前id: 8)const @pathArr = user.path.split(&#39;/&#39;)SELECT name FROM TABLENAME WHERE id IN @pathArr</code></pre><h3 id="查询后转树状"><a href="#查询后转树状" class="headerlink" title="查询后转树状"></a>查询后转树状</h3><pre><code class="javascript">/*递归函数 示例*/let recursive = (_list, path = 0) =&gt; &#123;    let _tree = [];    _list.forEach(item =&gt; &#123;        if(item.path === path) &#123;            let childs = recursive(_list, (path + &#39;/&#39; + item.id))            _tree.push(&#123;                ...item,                children: childs.length &gt; 0 ? childs : []            &#125;)        &#125;    &#125;)    return _tree&#125;console.log(recursive(list))</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raspberry pi</title>
      <link href="/2024/05/01/raspberry-pi/"/>
      <url>/2024/05/01/raspberry-pi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于Raspberry 初次使用注意以及基本内容，持续完善中…</p></blockquote><h2 id="系统烧录"><a href="#系统烧录" class="headerlink" title="系统烧录"></a>系统烧录</h2><pre><code>    1. 解压下载的系统压缩文件，得到img镜像文件    2. 将SD使用卡托或者读卡器后，连上电脑    3. 解压并运行win32diskimager工具（需要先格式化SD卡）    4. 在软件中选择img（镜像）文件，“Device”下选择SD的盘符，然后选择“Write”    # 然后就开始安装系统了，根据你的SD速度，安装过程有快有慢。    ps：树莓派官网提供的烧录工具选择更多点 https://www.raspberrypi.com/software/</code></pre><h2 id="首次开机"><a href="#首次开机" class="headerlink" title="首次开机"></a>首次开机</h2><h3 id="关于账号"><a href="#关于账号" class="headerlink" title="关于账号"></a>关于账号</h3><pre><code class="shell">    # 用户名：pi    # 密码：yahboom / raspberry    # root用户原始系统是没有开启的，自己设置密码就可以    sudo passwd root # 输入两次密码确认    sudo passwd --unlock root # 解锁root用户    # 切换root：    su # 确认后输入密码</code></pre><h3 id="进入后界面操作"><a href="#进入后界面操作" class="headerlink" title="进入后界面操作"></a>进入后界面操作</h3><pre><code class="shell">    # 打开树莓派系统下的命令行终端（Ctrl+Alt+T）        ifconfig # 查看我们的ip地址    sudo raspi-config # 进入到树莓派系统配置界面</code></pre><h3 id="关于几个常用命令"><a href="#关于几个常用命令" class="headerlink" title="关于几个常用命令"></a>关于几个常用命令</h3><pre><code class="shell">    # 查看操作系统版本    cat /proc/version    # 查看主板版本    cat /proc/cpuinfo    # 查看SD存储卡剩余空间    df -h    # 查看ip地址    ifconfig    # 压缩    tar –zcvf  filename.tar.gz dirname    # 解压    tar –zxvf filename.tar.gz    # Linux更改文件权限（递归子集）    chmod -R 777 /home/test</code></pre><h2 id="关机注意"><a href="#关机注意" class="headerlink" title="关机注意"></a>关机注意</h2><pre><code class="shell">    # 不能直接拔掉电源，会造成树莓派数据无法及时保存而丢失    # 可以按需选择相关的终端命令操作    sudo poweroff # 关闭电源    sudo shutdown -h now # 立刻关机    sudo shutdown -r now # 立刻重启    sudo reboot # 重启    sudo shutdown -h +2 # 2分钟之后关机</code></pre><h2 id="关于pi安装问题"><a href="#关于pi安装问题" class="headerlink" title="关于pi安装问题"></a>关于pi安装问题</h2><h3 id="apt-get基本命令"><a href="#apt-get基本命令" class="headerlink" title="apt-get基本命令"></a>apt-get基本命令</h3><pre><code class="shell"># apt-get可简写apt    # 更新源文件    sudo apt-get update    # 升级所有已安装的包    sudo apt-get upgrade    # 清理无用的包    sudo apt-get autoclean    # 检查是否有损坏的依赖    sudo apt-get check    # 安装     sudo apt-get install _name_    # 移除    sudo apt-get remove _name_    # 删除包，包括配置文件    sudo apt-get remove _name_ --purge    # 删除包，包括包及其依赖的软件、配置文件    sudo apt-get autoremove _name_ --purge</code></pre><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><pre><code class="shell">    # 下面两个源都可使用    # deb https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi    # deb https://mirrors.ustc.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi    sudo nano /etc/apt/sources.list # 进入该配置文件更换源    sudo apt update # 配置完成后执行该命令使生效</code></pre><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><pre><code class="shell">    # 树莓派无法直接安装mysql，建议使用 mariadb-server-10.0 ，用法一致    sudo apt-get install mariadb-server-10.0</code></pre><h3 id="解决无密码可登录mysql的问题"><a href="#解决无密码可登录mysql的问题" class="headerlink" title="解决无密码可登录mysql的问题"></a>解决无密码可登录mysql的问题</h3><pre><code class="shell">    # 进入mysql后执行    SET password for &#39;root&#39;@&#39;localhost&#39;=password(&#39;123456&#39;); # 设置密码    UPDATE user SET plugin=&#39;mysql_native_password&#39; WHERE user=&#39;root&#39;; # 修改root用户为校验密码    exit;    # 退出MySQL执行    systemctl restart mysql # 重启mysql，执行后选择账户输入密码即可    cd /etc/mysql # 配置文件下的bind-host改为0.0.0.0，允许任意远程登录    # mysql内执行    create user &#39;example&#39;@&#39;%&#39; identified by &#39;example123&#39;; # 创建用户    grant all on example.* to &#39;example&#39;@&#39;%&#39;; # 指定访问数据库    flush privileges; # 更新配置信息</code></pre><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><pre><code class="shell">    # 下载nvm的包放入/home/pi(也就是~的指向路径)    sudo nano ~/.bashrc    # 修改.bashrc文件在后面写入以下内容        export NVM_DIR=&quot;$HOME/.nvm/nvm-0.38.0&quot;        [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm        [ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion    # 执行命令更新配置    source ~/.bashrc    nvm install 16.19.0    nvm install 14.21.2    nvm install 8.17.0</code></pre><h2 id="部署node项目（pm2）"><a href="#部署node项目（pm2）" class="headerlink" title="部署node项目（pm2）"></a>部署node项目（pm2）</h2><pre><code class="shell">    # 安装pm2    npm install pm2 -g    # 查看版本    pm2 --version    # 启动服务    pm2 start app.js    # 停止服务    pm2 stop app.js    # 查看服务状态    pm2 monit    pm2 list    # 同步进程    pm2 save</code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2024/05/01/git/"/>
      <url>/2024/05/01/git/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git（读音为&#x2F;gɪt&#x2F;）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。<br>Git 是基于 Linux内核开发的版本控制工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使源代码的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p></blockquote><h2 id="第一次初始化"><a href="#第一次初始化" class="headerlink" title="第一次初始化"></a>第一次初始化</h2><pre><code class="bash">git initgit add .git commit -m “first commit”git remote add origin git@github.com:帐号名/仓库名.gitgit pull origin mastergit push origin master -f # 强推git clone git@github.com:git帐号名/仓库名.git # 下载克隆仓库数据</code></pre><h2 id="工作基本操作"><a href="#工作基本操作" class="headerlink" title="工作基本操作"></a>工作基本操作</h2><pre><code class="bash">git checkout master # 切到主分支git fetch origin # 获取最新变更git checkout -b dev origin/master # 基于主分支创建dev分支git add . # 添加到缓存git commit -m “xxx” # 提交到本地仓库git fetch origin # 获取最新变更</code></pre><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><pre><code class="bash">git init</code></pre><h2 id="查看仓库当前状态"><a href="#查看仓库当前状态" class="headerlink" title="查看仓库当前状态"></a>查看仓库当前状态</h2><pre><code class="bash">git status</code></pre><h2 id="文件相关操作"><a href="#文件相关操作" class="headerlink" title="文件相关操作"></a>文件相关操作</h2><h3 id="将文件添加到仓库"><a href="#将文件添加到仓库" class="headerlink" title="将文件添加到仓库"></a>将文件添加到仓库</h3><pre><code class="bash">git add 文件名 # 将工作区的某个文件添加到暂存区git add . # 将当前工作区的所有文件都加入暂存区git add -u # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，不处理untracked的文件git add -A # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，包括untracked的文件git add -i # 进入交互界面模式，按需添加文件到缓存区</code></pre><h3 id="将暂存区文件提交到本地仓库"><a href="#将暂存区文件提交到本地仓库" class="headerlink" title="将暂存区文件提交到本地仓库"></a>将暂存区文件提交到本地仓库</h3><pre><code class="bash">git commit -m “提交说明” # 将暂存区内容提交到本地仓库git commit -a -m “提交说明” # 跳过缓存区操作，直接把工作区内容提交到本地仓库</code></pre><h3 id="比较文件异同"><a href="#比较文件异同" class="headerlink" title="比较文件异同"></a>比较文件异同</h3><pre><code class="bash">git diff # 工作区与暂存区的差异git diff 分支名 # 工作区与某分支的差异，远程分支这样写：remotes/origin/分支名git diff HEAD # 工作区与HEAD指针指向的内容差异git diff 提交id 文件路径 # 工作区某文件当前版本与历史版本的差异git diff –stage # 工作区文件与上次提交的差异(1.6 版本前用 –cached)git diff 版本TAG # 查看从某个版本后都改动内容git diff 分支A 分支B # 比较从分支A和分支B的差异(也支持比较两个TAG)git diff 分支A…分支B # 比较两分支在分开后各自的改动</code></pre><p>另外：如果只想统计哪些文件被改动，多少行被改动，可以添加 –stat 参数</p><h2 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h2><pre><code class="bash">git log # 查看所有commit记录(SHA-A校验和，作者名称，邮箱，提交时间，提交说明)git log -p -次数 # 查看最近多少次的提交记录git log –stat # 简略显示每次提交的内容更改git log –name-only # 仅显示已修改的文件清单git log –name-status # 显示新增，修改，删除的文件清单git log –oneline # 让提交记录以精简的一行输出git log –graph –all –online # 图形展示分支的合并历史git log –author=作者 # 查询作者的提交记录(和grep同时使用要加一个–all–match参数)git log –grep=过滤信息 # 列出提交信息中包含过滤信息的提交记录git log -S查询内容 # 和–grep类似，S和查询内容间没有空格git log fileName # 查看某文件的修改记录</code></pre><h2 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h2><pre><code class="bash">git reset HEAD^ # 恢复成上次提交的版本git reset HEAD^^ # 恢复成上上次提交的版本，就是多个^，以此类推或用~次数git refloggit reset –hard 版本号# –soft：只是改变HEAD指针指向，缓存区和工作区不变；# –mixed：修改HEAD指针指向，暂存区内容丢失，工作区不变；# –hard：修改HEAD指针指向，暂存区内容丢失，工作区恢复以前状态；</code></pre><h2 id="版本库相关操作"><a href="#版本库相关操作" class="headerlink" title="版本库相关操作"></a>版本库相关操作</h2><pre><code class="bash">git rm 文件名 # 删除版本库文件git checkout — test.txt # 版本库里的版本替换工作区的版本</code></pre><h2 id="远程仓库相关操作"><a href="#远程仓库相关操作" class="headerlink" title="远程仓库相关操作"></a>远程仓库相关操作</h2><pre><code class="bash">git push -u origin master # 同步远程仓库git remote add origin git@github.com:账户名/仓库名.git # 本地仓库内容推送到远程仓库git clone git@github.com:git账号名/仓库名.git # 远程仓库克隆项目到本地git remote # 查看远程库信息# 拉取远程分支到本地仓库git checkout -b 本地分支 远程分支 # 会在本地新建分支，并自动切换到该分支git fetch origin 远程分支:本地分支 # 会在本地新建分支，但不会自动切换，还需checkoutgit branch –set-upstream 本地分支 远程分支 # 建立本地分支与远程分支的链接git fetch origin master # 同步远程仓库更新</code></pre><h2 id="分支相关操作"><a href="#分支相关操作" class="headerlink" title="分支相关操作"></a>分支相关操作</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><pre><code class="bash">git checkout -b dev # -b 表示创建并切换分支# 上面的一条命令相当于下面的两条git branch dev # 创建分支git checkout dev # 切换分支</code></pre><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><pre><code class="bash">git branch</code></pre><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><pre><code class="bash">git merge dev # 用于合并指定分支到当前分支git merge -no-ff -m &quot;merge with no-ff&quot; dev # 加上-no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并</code></pre><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><pre><code class="bash">git branch -d dev</code></pre><h3 id="查看分支合并图"><a href="#查看分支合并图" class="headerlink" title="查看分支合并图"></a>查看分支合并图</h3><pre><code class="bash">git log -graph -pretty=oneline-abbrev-commit</code></pre><h2 id="git相关配置"><a href="#git相关配置" class="headerlink" title="git相关配置"></a>git相关配置</h2><ul><li>安装完Git后第一件要做的事，设置用户信息(global可换成local在单独项目生效)</li></ul><pre><code class="bash">git config –global user.name “用户名” # 设置用户名git config –global user.email “用户邮箱” # 设置邮箱git config –global user.name # 查看用户名是否配置成功git config –global user.email # 查看邮箱是否配置</code></pre><h2 id="其他配置相关"><a href="#其他配置相关" class="headerlink" title="其他配置相关"></a>其他配置相关</h2><pre><code class="bash">git config –global –list # 查看全局设置相关参数列表git config –local –list # 查看本地设置相关参数列表git config –system –list # 查看系统配置参数列表git config –list # 查看所有Git的配置(全局+本地+系统)git config –global color.ui true # 显示git相关颜色</code></pre><h2 id="撤销某次提交"><a href="#撤销某次提交" class="headerlink" title="撤销某次提交"></a>撤销某次提交</h2><pre><code class="bash">git revert HEAD # 撤销最近的一个提交git revert 版本号 # 撤销某次commit</code></pre><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><pre><code class="bash">git tag 标签 # 打标签命令，默认为HEADgit tag # 显示所有标签git tag 标签 版本号 # 给某个commit版本添加标签git show 标签 # 显示某个标签的详细信息</code></pre>]]></content>
      
      
      <categories>
          
          <category> 仓库管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebRTC</title>
      <link href="/2024/05/01/webrtc/"/>
      <url>/2024/05/01/webrtc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>WebRTC (Web Real-Time Communications) 是一项实时通讯技术，它允许网络应用或者站点，在不借助中间媒介的情况下，建立浏览器之间点对点（Peer-to-Peer）的连接，实现视频流和（或）音频流或者其他任意数据的传输。WebRTC 包含的这些标准使用户在无需安装任何插件或者第三方的软件的情况下，创建点对点（Peer-to-Peer）的数据分享和电话会议成为可能。</p></blockquote><h2 id="媒体设备"><a href="#媒体设备" class="headerlink" title="媒体设备"></a>媒体设备</h2><p>MediaStream是用于获取音频和视频的对象。通过MediaStream可以访问摄像头、麦克风等设备。</p><pre><code class="js">const constraints = &#123;    video: true,    audio: true,&#125;navigator.mediaDevices.getUserMedia(constraints).then((stream) =&gt; &#123;    // stream是获取到的音频或视频流    const localStream = stream&#125;).catch((err) =&gt; &#123;    // 处理错误&#125;)</code></pre><h2 id="核心对象-RTCPeerConnection"><a href="#核心对象-RTCPeerConnection" class="headerlink" title="核心对象 RTCPeerConnection"></a>核心对象 RTCPeerConnection</h2><h3 id="注册RTC"><a href="#注册RTC" class="headerlink" title="注册RTC"></a>注册RTC</h3><p>RTCPeerConnection 作为创建点对点连接的 API,是我们实现音视频实时通信的关键。</p><pre><code class="js">const peerConnection = new RTCPeerConnection()</code></pre><h3 id="媒体协商方法"><a href="#媒体协商方法" class="headerlink" title="媒体协商方法"></a>媒体协商方法</h3><ul><li>createOffer</li></ul><pre><code class="js">peerConnection.createOffer(&#123;    offerToReceiveAudio: 1,    offerToReceiveVideo: 1,&#125;).then(offer =&gt; &#123;    // 获取offer&#125;)</code></pre><ul><li>createAnswer</li></ul><pre><code class="js">peerConnection.createAnswer().then(answer =&gt; &#123;    // 获取answer&#125;)</code></pre><ul><li>setLocalDescription</li></ul><pre><code class="js">// 设置远程offerpeerConnection.setLocalDescription(offer)// 设置远程answerpeerConnection.setLocalDescription(answer)</code></pre><ul><li>setRemoteDescription</li></ul><pre><code class="js">// 设置本地offerpeerConnection.setRemoteDescription(offer)// 设置本地answerpeerConnection.setRemoteDescription(answer)</code></pre><ul><li>addIceCandidate</li></ul><pre><code class="js">(candidate) =&gt; &#123;    // 设置candidate    peerConnection.addIceCandidate(candidate)&#125;</code></pre><ul><li>addStream</li></ul><pre><code class="js">// 设置视频流peerConnection.addStream(localStream)</code></pre><h3 id="重要事件"><a href="#重要事件" class="headerlink" title="重要事件"></a>重要事件</h3><ul><li>onicecandidate</li></ul><pre><code class="js">peerConnection.onicecandidate = (event) =&gt; &#123;    // event.candidate&#125;</code></pre><ul><li>addstream(官方已不推荐事件，建议使用addTrack) &#x2F; addTrack</li></ul><pre><code class="js">// 收到视频流peerConnection.onaddstream = (event) =&gt; &#123;    // event.stream&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebRTC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bugs</title>
      <link href="/2024/05/01/bugs/"/>
      <url>/2024/05/01/bugs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前端项目开发过程中碰到的有意思的问题记录，持续更新…</p></blockquote><h2 id="项目安装依赖"><a href="#项目安装依赖" class="headerlink" title="项目安装依赖"></a>项目安装依赖</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><ol><li>报错内容</li></ol><pre><code class="shell">git .EXE ls-remote -h -t ssh://git@github.com/************.git</code></pre><ol start="2"><li>解决方案</li></ol><pre><code class="shell"># 全局配置 将使用到的依赖仓库的地址git更改为httpsgit config --global url.&quot;https://&quot;.insteadOf git://npm cache clean --forcenpm config set registry https://registry.npmmirror.com/npm install</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bugs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Models</title>
      <link href="/2024/05/01/django-models/"/>
      <url>/2024/05/01/django-models/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于Django的模型类的数据增删改查</p></blockquote><pre><code class="python">from user import models</code></pre><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="save"><a href="#save" class="headerlink" title="save()"></a>save()</h3><pre><code class="python">book = models.Book(title=&quot;教程&quot;, price=300, publish=&quot;出版社&quot;, pub_date=&quot;2008-8-8&quot;) book.save()</code></pre><h3 id="create"><a href="#create" class="headerlink" title="create()"></a>create()</h3><pre><code class="python">books = models.Book.objects.create(title=&quot;如来神掌&quot;, price=200, publish=&quot;功夫出版社&quot;, pub_date=&quot;2010-10-10&quot;)</code></pre><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><h3 id="符合条件的第一个"><a href="#符合条件的第一个" class="headerlink" title="符合条件的第一个"></a>符合条件的第一个</h3><pre><code class="python">books=models.Book.objects.filter(pk=8).first().delete()</code></pre><h3 id="符合条件的"><a href="#符合条件的" class="headerlink" title="符合条件的"></a>符合条件的</h3><pre><code class="python">books=models.Book.objects.filter(pk__in=[1, 2]).first().delete()</code></pre><h3 id="符合条件的最后一个"><a href="#符合条件的最后一个" class="headerlink" title="符合条件的最后一个"></a>符合条件的最后一个</h3><pre><code class="python">books=models.Book.objects.filter(pk=8).last().delete()</code></pre><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><h3 id="save-1"><a href="#save-1" class="headerlink" title="save()"></a>save()</h3><pre><code class="python">books = models.Book.objects.filter(pk=7).first()books.price = 400books.save()</code></pre><h3 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h3><pre><code class="python">books = models.Book.objects.filter(pk__in=[7, 8]).update(price=888)</code></pre><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><blockquote><p>查询建议：使用values()配合filter()、exclude()等方法处理表查询，values()返回的是字典的集合，处理方便</p></blockquote><h3 id="所有"><a href="#所有" class="headerlink" title="所有"></a>所有</h3><pre><code class="python"># all(): 类似于 list，里面放的是一个个模型类的对象，可用索引下标取出模型类的对象 比如def就是一个模型类books = models.Book.objects.all()</code></pre><h3 id="第一条"><a href="#第一条" class="headerlink" title="第一条"></a>第一条</h3><pre><code class="python">books = models.Book.objects.first()</code></pre><h3 id="最后一条"><a href="#最后一条" class="headerlink" title="最后一条"></a>最后一条</h3><pre><code class="python">books = models.Book.objects.last()</code></pre><h3 id="部分字段"><a href="#部分字段" class="headerlink" title="部分字段"></a>部分字段</h3><pre><code class="python"># 返回内容键对值 values(): 类似于 list，里面不是模型类的对象，而是一个可迭代的字典序列 比如&#123;name：123&#125;就是字典books = models.Book.objects.values(&quot;pk&quot;, &quot;price&quot;)# 返回内容只有值books = models.Book.objects.values_list(&quot;price&quot;, &quot;publish&quot;)</code></pre><h3 id="单字段并去重"><a href="#单字段并去重" class="headerlink" title="单字段并去重"></a>单字段并去重</h3><pre><code class="python">books = models.Book.objects.values(&quot;price&quot;).distinct()</code></pre><h3 id="符合条件"><a href="#符合条件" class="headerlink" title="符合条件"></a>符合条件</h3><pre><code class="python"># filter(): 类似于 list，里面放的是一个个模型类的对象，可用索引下标取出模型类的对象 比如def就是一个模型类books=models.Book.objects.filter(pk=8)# 查（符合条件-日期单查年）books=models.Book.objects.filter(pub_date__year=2023) # pub_date: 2023-10-15# 查（符合条件-日期单查月）books=models.Book.objects.filter(pub_date__month=10) # pub_date: 2023-10-15# 查（符合条件-日期单查日）books=models.Book.objects.filter(pub_date__day=1) # pub_date: 2023-10-1# 查（__contains 包含，= 号后面为字符串 区分大小写）books=models.Book.objects.filter(title__contains=&quot;菜&quot;)# 查（__icontains 包含 不区分大小写）books=models.Book.objects.filter(title__icontains=&quot;python&quot;)# 查（title__startswith 指定内容开头）books=models.Book.objects.filter(title__startswith=&quot;菜&quot;)# 查（title__endswith 指定内容结尾）books=models.Book.objects.filter(title__endswith=&quot;教程&quot;)# 查（条件in查询）books = models.Book.objects.filter(price__in=[200,300])# 查（区间range查询）books = models.Book.objects.filter(price__range=[200,300])# 查（大于）books = models.Book.objects.filter(price__gt=200)# 查（大于等于）books = models.Book.objects.filter(price__gte=200)# 查（小于）books=models.Book.objects.filter(price__lt=300)# 查（小于等于）books=models.Book.objects.filter(price__lte=300)</code></pre><h3 id="不符合条件"><a href="#不符合条件" class="headerlink" title="不符合条件"></a>不符合条件</h3><pre><code class="python">books = models.Book.objects.exclude(publish=&#39;出版社&#39;, price=300)</code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><pre><code class="python"># 查询所有，按照价格升序排列 books = models.Book.objects.order_by(&quot;price&quot;)# 查询所有，按照价格降序排列books = models.Book.objects.order_by(&quot;-price&quot;)</code></pre><h3 id="数量"><a href="#数量" class="headerlink" title="数量"></a>数量</h3><pre><code class="python"># 查（符合条件数量）books = models.Book.objects.filter(price=200).count() </code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
